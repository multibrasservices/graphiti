# docker-compose.yml - Version finale avec proxy Caddy interne

services:
  # NOUVEAU SERVICE : Notre proxy de sécurité interne
  caddy:
    image: caddy:latest
    restart: unless-stopped
    depends_on:
      - graph
    # On expose le port 80 de ce conteneur. C'est ici que Coolify va se connecter.
    expose:
      - "80"
    # On monte notre fichier de configuration Caddyfile dans le conteneur.
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    # On lui passe les variables d'environnement pour l'authentification.
    environment:
      - BASIC_AUTH_USER=${BASIC_AUTH_USER}
      - BASIC_AUTH_PASS=${BASIC_AUTH_PASS}
    # On ajoute un label pour que Coolify sache quel port utiliser.
    labels:
      - "coolify.port=80"

  graph:
    build:
      context: .
    # MODIFICATION : Le service graph n'est plus exposé à l'extérieur.
    # Seul notre service 'caddy' peut lui parler. On retire les labels.
    expose:
      - "8000"
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8000/healthcheck')",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${GRAPH_SERVICE_USER}
      - NEO4J_PASSWORD=${GRAPH_SERVICE_PASSWORD}
      - PORT=8000

  neo4j:
    image: neo4j:5.26.2
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:7474 || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      - NEO_AUTH=${NEO4J_AUTH}

volumes:
  neo4j_data:
